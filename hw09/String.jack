// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String
{

    field Array chars;
    field int len;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength)
    {
        if(maxLength < 1)
        {
            //TODO error?
            let maxLength = 1;
        }
        
        let chars = Array.new(maxLength);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose()
    {
        do chars.dispose();
        do Memory.dealloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length()
    {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j)
    {
        //c style no bounds checking
        //aint nobody got time for that
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c)
    {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c)
    {
        let chars[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar()
    {
        if(len > 0)
        {
            let len = len - 1; 
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue()
    {
        var int num, i;
        var boolean isNeg;
        
        let num = 0;
        
        if(len > 1 & chars[0] = 45)
        {
            let i = i + 1;
            let isNeg = true;
        }
        else
        {
            //TODO maybe check for len > 0
            let i = 0;
            let isNeg = false;
        }
        //TODO maybe throw error on invalid lens (only '-' xor no digits)
        
        //TODO consider inlining functions
        while(i < len  & String.isDigit(chars[i]))
        {
            let num = (num * 10) + chars[i] - 48;
            let i = i + 1;
        }
        
        if(isNeg)
        {
            return -num;
        }
        else
        {
            return num;
        }
    }
    
    function bool isDigit(char c)
    {
        return (c > 47) & (c < 58);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val)
    {
        return;
    }

    /** Returns the new line character. */
    function char newLine()
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace()
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote()
    {
        return 34;
    }
}
